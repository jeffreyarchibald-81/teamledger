

/**
 * @interface Position
 * @description Represents a single role or position within the organization. 
 * This is the core data structure for the entire application.
 */
export interface Position {
  /** A unique identifier for the position, typically a UUID. */
  id: string;
  /** The title of the role, e.g., "CEO", "Senior Developer". */
  role: string;
  /** The ID of the position this role reports to. `null` for the root-level position. */
  managerId: string | null;
  /** Defines whether the role directly generates revenue or is a cost center. */
  roleType: 'billable' | 'nonBillable';

  // --- User-Modifiable Inputs ---
  /** The base annual salary for the position. */
  salary: number;
  /** The hourly billable rate for this position's work. Only applicable if `roleType` is 'billable'. */
  rate: number;
  /** The target percentage of time this position spends on billable work. Only applicable if `roleType` is 'billable'. */
  utilization: number; // percentage

  // --- Calculated Financial Metrics ---
  /** The total cost of the employee's salary after accounting for benefits, taxes, etc. (salary * benefitsMultiplier). */
  totalSalary: number;
  /** The allocated operational overhead cost for this position (totalSalary * overheadMultiplier). */
  overheadCost: number;
  /** The total cost of this position to the company (totalSalary + overheadCost). */
  totalCost: number;
  /** The total annual revenue this position is expected to generate. */
  revenue: number;
  /** The annual profit generated by this position (revenue - totalCost). */
  profit: number;
  /** The profit margin for this position as a percentage ((profit / revenue) * 100). */
  margin: number; // percentage
}

/**
 * @type PositionInput
 * @description Defines the shape of data required to create a new `Position`. 
 * It omits the `id` (which is generated automatically) and all calculated financial fields.
 */
export type PositionInput = Omit<Position, 'id' | 'totalSalary' | 'overheadCost' | 'totalCost' | 'revenue' | 'profit' | 'margin'>;

/**
 * @type PositionUpdate
 * @description Defines the shape of data required to update an existing `Position`. 
 * It includes the `id` but omits the calculated financial fields, which are re-calculated on update.
 */
export type PositionUpdate = Omit<Position, 'totalSalary' | 'overheadCost' | 'totalCost' | 'revenue' | 'profit' | 'margin'>;

/**
 * @interface TreeNode
 * @description Extends the `Position` interface to include hierarchical data,
 * used for rendering the org chart tree structure.
 */
export interface TreeNode extends Position {
  /** An array of child `TreeNode` objects that report to this position. */
  children: TreeNode[];
  /** The depth of the node in the hierarchy, where the root is depth 0. */
  depth: number;
}

/**
 * @interface AIAnalysisResult
 * @description Defines the expected structure of the JSON object returned by the AI analysis API.
 */
export interface AIAnalysisResult {
  /** A list of positive aspects of the organizational structure. */
  strengths: string[];
  /** A list of potential issues, bottlenecks, or opportunities for improvement. */
  risks_opportunities: string[];
  /** A list of neutral, noteworthy observations about the structure or financials. */
  key_observations: string[];
}
